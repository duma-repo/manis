
option java_package = "com.cnblogs.duma.ipc.protobuf";
option java_outer_classname = "RpcHeaderProtos";
option java_generate_equals_and_hash = true;
package duma.manis;

enum RpcKindProto {
    RPC_BUILTIN          = 0;  // 内部使用，为了占位
    RPC_SERIALIZABLE     = 1;  // 使用 WritableRpcEngine
    RPC_PROTOCOL_BUFFER  = 2;  // 使用 ProtobufRpcEngine
}

message RpcRequestHeaderProto {
    // RPC 请求头
    enum OperationProto {
        RPC_FINAL_PACKET        = 0; // 最终的 rpc 包
        RPC_CONTINUATION_PACKET = 1; // 尚未完成的包
        RPC_CLOSE_CONNECTION     = 2; // 关闭 rpc 连接
    }

    optional RpcKindProto rpcKind = 1;
    optional OperationProto rpcOp = 2;
    required sint32 callId = 3; // a sequence number that is sent back in response
    required bytes clientId = 4; // 全局唯一的 client ID
    // clientId + callId 可以唯一确定请求重试的次数，1 意味着第一次重试
    optional sint32 retryCount = 5 [default = -1];
}

/**
 * Rpc Response Header
 * +------------------------------------------------------------------+
 * | Rpc total response length in bytes (4 bytes int)                 |
 * |  (sum of next two parts)                                         |
 * +------------------------------------------------------------------+
 * | RpcResponseHeaderProto - serialized delimited ie has len         |
 * +------------------------------------------------------------------+
 * | if request is successful:                                        |
 * |   - RpcResponse -  The actual rpc response  bytes follow         |
 * |     the response header                                          |
 * |     This response is serialized based on RpcKindProto            |
 * | if request fails :                                               |
 * |   The rpc response header contains the necessary info            |
 * +------------------------------------------------------------------+
 *
 * Note that rpc response header is also used when connection setup fails.
 * Ie the response looks like a rpc response with a fake callId.
 */
message RpcResponseHeaderProto {
    /**
      *
      * RpcStastus - success or failure
      * The reponseHeader's errDetail,  exceptionClassName and errMsg contains
      * further details on the error
      **/

    enum RpcStatusProto {
        SUCCESS = 0;  // RPC succeeded
        ERROR = 1;    // RPC or error - connection left open for future calls
        FATAL = 2;    // Fatal error - connection closed
    }

    enum RpcErrorCodeProto {

        // Non-fatal Rpc error - connection left open for future rpc calls
        ERROR_APPLICATION = 1;      // RPC Failed - rpc app threw exception
        ERROR_NO_SUCH_METHOD = 2;   // Rpc error - no such method
        ERROR_NO_SUCH_PROTOCOL = 3; // Rpc error - no such protocol
        ERROR_RPC_SERVER  = 4;      // Rpc error on server side
        ERROR_SERIALIZING_RESPONSE = 5; // error serializign response
        ERROR_RPC_VERSION_MISMATCH = 6; // Rpc protocol version mismatch


        // Fatal Server side Rpc error - connection closed
        FATAL_UNKNOWN = 10;                   // unknown Fatal error
        FATAL_UNSUPPORTED_SERIALIZATION = 11; // IPC layer serilization type invalid
        FATAL_INVALID_RPC_HEADER = 12;        // fields of RpcHeader are invalid
        FATAL_DESERIALIZING_REQUEST = 13;     // could not deserilize rpc request
        FATAL_VERSION_MISMATCH = 14;          // Ipc Layer version mismatch
        FATAL_UNAUTHORIZED = 15;              // Auth failed
    }

    required uint32 callId = 1; // callId used in Request
    required RpcStatusProto status = 2;
    optional uint32 serverIpcVersionNum = 3; // Sent if success or fail
    optional string exceptionClassName = 4;  // if request fails
    optional string errorMsg = 5;  // if request fails, often contains strack trace
    optional RpcErrorCodeProto errorDetail = 6; // in case of error
    optional bytes clientId = 7; // Globally unique client ID
    optional sint32 retryCount = 8 [default = -1];
}